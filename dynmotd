#!/usr/bin/env bash
###########################
#                         #
#  Saint @ Shardbyte.com  #
#                         #
###########################
# Copyright (c) 2023-2025 Shardbyte
# Author: Shardbyte (Saint)
# License: MIT
# https://github.com/Shardbyte/shard-dotfiles/raw/master/LICENSE
######  BEGIN FILE  ###### ######  BEGIN FILE  ###### ######  BEGIN FILE  ######
# ----- Shardbyte Dynamic MOTD -----

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# -------------------- Configuration -------------------- #

readonly SCRIPT_VERSION="2.0.0"
readonly CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"

# -------------------- Color Variables -------------------- #

readonly YW='\033[33m'           # Yellow Text
readonly GN='\033[1;92m'         # Green Text  
readonly RD='\033[1;91m'         # Red Text
readonly BL='\033[1;94m'         # Blue Text
readonly CL='\033[0m'            # Reset Text
readonly BOLD='\033[1m'          # Bold Text

# -------------------- System Variables -------------------- #

readonly USER=$(whoami)
readonly HOSTNAME=$(hostname)
readonly FASTFETCH_USER_CONFIG="$CONFIG_DIR/fastfetch/config.jsonc"
readonly FASTFETCH_ROOT_CONFIG="/root/.config/fastfetch/config.jsonc"

# -------------------- Functions -------------------- #

# Get time-based greeting
get_greeting() {
    local hour timezone_offset
    
    # Try to get local time, fall back to UTC if needed
    if command -v timedatectl &> /dev/null && timedatectl status &> /dev/null; then
        hour=$(date +"%H")
    else
        hour=$(date -u +"%H")
    fi
    
    case $hour in
        0[0-5])         echo "Late Night" ;;
        0[6-9]|1[01])   echo "Morning" ;;
        1[2-6])         echo "Afternoon" ;;
        1[7-9]|2[01])   echo "Evening" ;;
        2[2-3])         echo "Late Night" ;;
        *)              echo "Day" ;;
    esac
}

# Generate dynamic border based on message length
generate_border() {
    local message="$1"
    local length=${#message}
    local border_char="━"
    local min_padding=4
    local total_length=$((length + min_padding))
    
    printf "╭%s╮\n" "$(printf "%*s" $total_length "" | tr ' ' "$border_char")"
    printf "┗━━╋━ %s ━╋━━┛\n" "$message"
    printf "╰%s╯\n" "$(printf "%*s" $total_length "" | tr ' ' "$border_char")"
}

# Check if fastfetch is available and config exists
check_fastfetch() {
    local config_path="$1"
    
    if ! command -v fastfetch &> /dev/null; then
        echo -e "${RD}Warning: fastfetch not found. Install it for system information display.${CL}" >&2
        return 1
    fi
    
    if [[ ! -f "$config_path" ]]; then
        echo -e "${YW}Info: fastfetch config not found at $config_path${CL}" >&2
        return 1
    fi
    
    return 0
}

# Display system info with fastfetch
show_system_info() {
    local config_path="$1"
    local fallback_info=""
    
    if check_fastfetch "$config_path"; then
        fastfetch --config "$config_path" 2>/dev/null || {
            echo -e "${YW}Warning: fastfetch execution failed, showing basic info${CL}" >&2
            show_basic_info
        }
    else
        show_basic_info
    fi
}

# Basic system info fallback
show_basic_info() {
    echo -e "${BL}System Info:${CL}"
    echo -e "  Host: ${GN}$HOSTNAME${CL}"
    echo -e "  User: ${GN}$USER${CL}"
    echo -e "  Shell: ${GN}${SHELL##*/}${CL}"
    
    if command -v uptime &> /dev/null; then
        local uptime_info
        uptime_info=$(uptime -p 2>/dev/null || uptime | cut -d',' -f1 | cut -d' ' -f4-)
        echo -e "  Uptime: ${GN}$uptime_info${CL}"
    fi
    
    if command -v df &> /dev/null; then
        local disk_usage
        disk_usage=$(df -h / 2>/dev/null | awk 'NR==2 {print $5}' | tr -d '%')
        if [[ -n "$disk_usage" ]] && [[ "$disk_usage" =~ ^[0-9]+$ ]]; then
            local color="${GN}"
            [[ $disk_usage -gt 80 ]] && color="${YW}"
            [[ $disk_usage -gt 90 ]] && color="${RD}"
            echo -e "  Disk Usage: ${color}${disk_usage}%${CL}"
        fi
    fi
}

# Display greeting for root user
display_root_greeting() {
    local greeting
    greeting=$(get_greeting)
    
    clear
    echo ""
    
    case "$greeting" in
        "Morning")
            echo -e "${YW}$(generate_border "Good Morning $USER")${CL}"
            ;;
        "Afternoon")
            echo -e "${YW}$(generate_border "Good Afternoon $USER")${CL}"
            ;;
        "Evening")
            echo -e "${YW}$(generate_border "Good Evening $USER")${CL}"
            ;;
        "Late Night")
            echo -e "${YW}$(generate_border "Working Late, $USER?")${CL}"
            ;;
        *)
            echo -e "${YW}$(generate_border "Welcome $USER")${CL}"
            ;;
    esac
    
    echo ""
    show_system_info "$FASTFETCH_ROOT_CONFIG"
}

# Display greeting for regular user
display_user_greeting() {
    local greeting
    greeting=$(get_greeting)
    
    clear
    echo ""
    
    case "$greeting" in
        "Morning")
            echo -e "${YW}$(generate_border "Good Morning $USER")${CL}"
            ;;
        "Afternoon")
            echo -e "${YW}$(generate_border "Good Afternoon $USER")${CL}"
            ;;
        "Evening")
            echo -e "${YW}$(generate_border "Good Evening $USER")${CL}"
            ;;
        "Late Night")
            echo -e "${YW}$(generate_border "Burning the Midnight Oil, $USER?")${CL}"
            ;;
        *)
            echo -e "${YW}$(generate_border "Welcome $USER")${CL}"
            ;;
    esac
    
    echo ""
    show_system_info "$FASTFETCH_USER_CONFIG"
}

# Display rules/footer
display_rules() {
    local rules="${YW}
          ::::::::::::::::::::::::::::::::::-RULES-::::::::::::::::::::::::::::::::::
            This is a private system that you are not to give out access to anyone
           without permission from the admin. Keep it OS (OldSkool) and Stay Frosty.
                            ⚡⚡  THE SHARDBYTE COLLECTIVE  ⚡⚡${CL}"
    
    echo -e "$rules\n"
}

# Main execution function
main() {
    # Check if running as root
    if [[ $EUID -eq 0 ]]; then
        display_root_greeting
    else
        display_user_greeting
    fi
    
    display_rules
}

# -------------------- Execution -------------------- #

# Only run if script is executed directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

######  END FILE  ###### ######  END FILE  ###### ######  END FILE  ######